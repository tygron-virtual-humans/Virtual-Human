#import "HousingMain.mod2g".
#import "HousingEvent.mod2g".
#import "CompanyMain.mod2g".
#import "CompanyEvent.mod2g".
#import "StandardEvents.mod2g".

init module {
	knowledge {
		updateIncLand(Old, Surface, New):- New is Old+Surface.
		updateDecLand(Old, Surface, New):- New is Old-Surface.
		newBudget(Current,Surface, Cost, New) :- New is Current-(Surface*Cost).
		calculateNeededLand(Perc, Surf) :- standardPrice(X), budget(Current), Surf is (Current*(Perc/100))/X.
		oldNewPercentage(Rejected, NewPercentage) :- NewPercentage is 50-Rejected*10.
		rejectedPermits(Current, New) :- New is Current + 1.
	}
	
	beliefs {
		%Belief that the stakeholder has no land
		targetReached(false).
	
		
		%Current price for land
		standardPrice(400).
		
		%Current owned land 
		land(0).
		
		%Current permit state
		readyForPermit(true).
		
		%Percentage to use when buying
		percentage(50).
		
		%Numeber rejected permits
		rejectedConcurrentPermits(0).
		
		%---- Self hardcoded
		selfStakeholderID(1).
	}
	
	program {
				
		%Initialize itself with an ID.
		if bel( percept(selfStakeholderID(ID))) then insert(selfStakeholderID(ID)).
		
		%Initialize the other stakeholders.
		forall bel (percept(stakeholder(ID, Type, Name))) do insert( stakeholder(ID, Type, Name)).
		
		% Initialize the indicators for this stakeholder with its importance.
		forall bel (percept( initIndicator(StakeholderID, IndicatorID, Weight)), selfStakeholderID(StakeholderID)) do insert(initIndicator(StakeholderID, IndicatorID, Weight)).

		%Initialize the targets with their current value and progress.
		forall bel(percept(indicator(ID, Type, Name, Progress, Current, Target))) do insert(indicator(ID, Type, Name, Progress, Current, Target)).
		
		%Initialize the buget of the stakeholder.
		if bel( percept(indicator(IndiID, Type, _, _, Current, _)), Type == 'finance', selfStakeholderID(ID), initIndicator(ID, IndiID, _)) then insert( budget(Current), oldBudget(Current)).		
	}
		
	actionspec{
		%Action for buying land.
		buyLand(Surface, Cost) {
			pre { land(Old), updateIncLand(Old,Surface, New)}
			post{not(land(Old)),land(New)}
		}
		
		%Action for building.
		build(Surface, Type) {
			pre { land(Old), updateDecLand(Old,Surface, New) }
			post{not(land(Old)), land(New) }
		}
	}
}

main module {
	program {	
		
		%Dynamic main change for the stakeholders
		forall bel(targetReached(false)) do {
			if bel(selfStakeholderID(1)) then HousingMain.
			if bel(selfStakeholderID(2)) then CompanyMain.
		}
	}
}

event module {
	program {
		
		% Update budget on change
		if bel( percept(indicator(IndiID, Type, _, _, New, _)), Type == 'finance', selfStakeholderID(ID),
		 initIndicator(ID, IndiID, _), budget(X), X\=New) then delete(budget(X)) + insert( budget(New)).
		
		%Update indicators on change.
		forall bel( percept( indicator(ID, Type, Name, NewProgress, NewCurrent, Target)),
				indicator(ID, Type, Name, OldProgress, OldCurrent, Target)) 
		do delete(indicator(ID, Type, Name, OldProgress, OldCurrent, Target)) 
		+  insert(indicator(ID, Type, Name, NewProgress, NewCurrent, Target)).
		
		%Check if all the progresses are 100%. If so, head target is reach
		if bel(indicator(ID, Type, Name, Progress, Current, Target), Progress == '100', targetReached(false)) 
		then delete(targetReached(false)) + insert(targetReached(true)).  
		
		if bel(indicator(ID, Type, Name, Progress, Current, Target), Progress \= '100', targetReached(true)) 
		then delete(targetReached(true)) + insert(targetReached(false)).  
	
		%Permit handeling		
		if bel( percept(responcePermit(ID)), 
				readyForPermit(false), 
				selfStakeholderID(ID), 
				oldBudget(OldBudget), 
				budget(CurrentBudget), 
				rejectedConcurrentPermits(X), 
				rejectedPermits(Current, New))
			then  {
				if bel(OldBudget == CurrentBudget) then delete(rejectedConcurrentPermits(Current)) + insert(rejectedConcurrentPermits(New)).
				if bel(OldBudget \= CurrentBudget ) then delete(readyForPermit(false), oldBudget(OldBudget),
				rejectedConcurrentPermits(X)) + insert(readyForPermit(true), oldBudget(CurrentBudget), rejectedConcurrentPermits(0)).
			}
			
		%run only when target is not reached
		if bel(targetReached(false)) then {
			
			if bel(selfStakeholderID(1)) then HousingEvent.
			if bel(selfStakeholderID(2)) then CompanyEvent.
		
		}
	}
}
