#import "HousingMain.mod2g".
#import "CompanyMain.mod2g".


init module {
	knowledge {
		
		% Calculate how much land will be bought from the current budget.
		calculateNeededLand(Perc, Surf) :- standardPrice(PricePerSquare), budget(Current), Surf is (Current*(Perc/100))/PricePerSquare.
		
		% Decrease the amount of land you buy for every time your request to buy land has been rejected.
		oldNewPercentage(Rejected, NewPercentage) :- NewPercentage is 50-Rejected*10.
		
		% Increment the number of rejected Permits.
		rejectedPermits(Current, New) :- New is Current + 1.
		
		% Calculate the division of buildings for housing.
		houseParkRatio(Surface, Houses, Parks) :- Houses is (Surface * 0.75), Parks is (Surface * 0.25).
		
		% Calculate the division of buildings for company.
		officesParkingRatio(Surface, Offices, Parking) :- Offices is (Surface * 0.75), Parking is (Surface * 0.25).
	}
	
	beliefs {
		
		% Boolean that shows whether the stakeholder has reached his goal yet.
		targetReached(false).
	
		% Standard price for each square of land.
		standardPrice(400).
		
		% Current permit state (whether he is waiting for a permit to be accepted or not).
		readyForPermit(true).
		
		% Percetage of budget to use when buying land.
		percentage(50).
		
		% Number of rejected permits in a row.
		rejectedConcurrentPermits(0).	
		
	}
	
	program {
				
		%Initialize itself with an ID.
		if bel( percept(stakeholderSelf(ID))) then insert(selfStakeholderID(ID)).
		
		%Initialize the other stakeholders.
		forall bel (percept(stakeholder(ID, Type, Name))) do insert( stakeholder(ID, Type, Name)).
		
		% Initialize the indicators for this stakeholder with its importance.
		forall bel ( percept( initIndicator(StakeholderID, IndicatorID, Weight)), selfStakeholderID(StakeholderID)) 
		do insert( initIndicator(StakeholderID, IndicatorID, Weight)).

		% Initialize the targets with their current value and progress.
		forall bel( percept( indicator(ID, Type, Name, Progress, Current, Target))) 
		do insert( indicator(ID, Type, Name, Progress, Current, Target)).
		
		% Initialize the buget of the stakeholder.
		if bel( percept( indicator(IndiID, Type, _, _, Current, _)), Type == 'finance', selfStakeholderID(ID), initIndicator(ID, IndiID, _)) 
		then insert( budget(Current), oldBudget(Current)).		
		
		% Initialize the amount of available land.
		if bel(percept( availableLand(Surface))) then insert(availableLand(Surface)).
	}
		
	actionspec{
		
		% Action for buying land.
		buyLand(Surface, Cost) {
			
			pre { true }
			post{ true }
			
		}
		
		% Action for building.
		build(Surface, Type) {
			
			pre { true }
			post{ true }
			
		}
	}
}

main module {
	program {	
		
		%Dynamic main change for the stakeholders
		if bel(targetReached(false)) then {
			if goal( build(Surface, Type)) then build(Surface, Type) + drop(build(Surface, Type)).
			if goal( buyNewLand), 
				bel(percentage(Percentage), standardPrice(Cost), calculateNeededLand(Percentage, Land)) 
				then buyLand(Land, Cost). 
			if bel(selfStakeholderID(1)) then HousingMain.
			if bel(selfStakeholderID(2)) then CompanyMain.
		}
	}
}

event module {
	program {
		
		% Update the amount of available land.
		if bel( percept( availableLand(New)), availableLand(Old)) then delete(availableLand(Old)) + insert(availableLand(New)).
		
		% Update budget on change.
		if bel( percept( indicator(IndiID, Type, _, _, New, _)), Type == 'finance', selfStakeholderID(ID),
		 initIndicator(ID, IndiID, _), budget(Old), Old\=New) then delete( budget(Old)) + insert( budget(New)).
		
		% Update indicators on change.
		forall bel( percept( indicator(ID, Type, Name, NewProgress, NewCurrent, Target)),
				indicator(ID, Type, Name, OldProgress, OldCurrent, Target)) 
		do delete( indicator(ID, Type, Name, OldProgress, OldCurrent, Target)) 
		+  insert( indicator(ID, Type, Name, NewProgress, NewCurrent, Target)).
		
		% If the progress is 100, the target is reached and the agent stops.
		if bel( indicator(ID, Type, Name, Progress, Current, Target), Progress == '100', targetReached(false)) 
		then delete( targetReached(false)) + insert( targetReached(true)).  
		
		% If one progress is not 100 yet, the target is not reached, so the agent still has to do actions.
		if bel( indicator(ID, Type, Name, Progress, Current, Target), Progress \= '100', targetReached(true)) 
		then delete( targetReached(true)) + insert( targetReached(false)).  
	
		%Permit handeling.	
		if bel( percept(permits(0)), 
				readyForPermit(false), 
				oldBudget(OldBudget), 
				budget(CurrentBudget), 
				rejectedConcurrentPermits(X), 
				rejectedPermits(Current, New))
			then  {
				if bel(OldBudget == CurrentBudget) then delete(rejectedConcurrentPermits(Current)) + insert(rejectedConcurrentPermits(New)).
				if bel(OldBudget \= CurrentBudget ) then delete(readyForPermit(false), oldBudget(OldBudget),
				rejectedConcurrentPermits(X)) + insert(readyForPermit(true), oldBudget(CurrentBudget), rejectedConcurrentPermits(0)).
			}
	}
}
